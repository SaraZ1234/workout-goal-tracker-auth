<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Admin Dashboard</title>
    <link rel="stylesheet" href="/css/style.css" />
    <style>
      * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
      }
      body {
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
        background: #fff;
        color: #222;
        line-height: 1.5;
      }

      .container {
        max-width: 1200px;
        margin: 100px auto;
        padding: 0 15px;
      }

      .topbar {
        text-align: center;
        margin-bottom: 20px;
        font-size: 16px;
        color: #3e0703;
      }

      .user-section {
        background: #f9f9f9;
        border-radius: 8px;
        padding: 20px;
        margin-bottom: 25px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      }
      .user-section h3 {
        margin-bottom: 15px;
        color: #222;
      }

      .table-responsive {
        width: 100%;
        overflow-x: auto;
        -webkit-overflow-scrolling: touch;
        margin-bottom: 15px;
      }
      table {
        width: 100%;
        border-collapse: collapse;
        min-width: 600px;
      }
      th,
      td {
        padding: 12px 15px;
        text-align: left;
        border-bottom: 1px solid #ddd;
        color: #222;
      }
      th {
        background: #415e72;
        color: #fff;
        text-transform: uppercase;
        font-size: 14px;
        letter-spacing: 0.5px;
        position: sticky;
        top: 0;
        z-index: 10;
      }
      tr:hover {
        background: #f1f1f1;
      }

      button {
        padding: 6px 12px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-weight: 500;
        transition: 0.3s;
      }
      .update-btn {
        background: #222;
        color: #fff;
      }
      .delete-btn {
        background: #3e0703;
        color: #fff;
      }
      .add-btn {
        background: #3e0703;
        color: #fff;
        margin-bottom: 10px;
      }
      button:hover {
        opacity: 0.85;
      }

      .modal {
        display: none;
        position: fixed;
        inset: 0;
        background: rgba(0, 0, 0, 0.5);
        justify-content: center;
        align-items: center;
        z-index: 1000;
      }
      .modal-content {
        background: #fff;
        padding: 25px;
        border-radius: 10px;
        width: 500px;
        max-width: 90%;
        position: relative;
        max-height: 90vh;
        overflow-y: auto;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
        color: #222;
      }
      .modal-content h3 {
        margin-bottom: 15px;
        color: #3e0703;
      }
      .modal-content input,
      .modal-content select {
        width: 100%;
        padding: 10px;
        margin-bottom: 12px;
        border: 1px solid #ccc;
        border-radius: 6px;
        font-size: 14px;
        color: #222;
      }
      .close {
        position: absolute;
        right: 15px;
        top: 12px;
        cursor: pointer;
        font-size: 22px;
        font-weight: bold;
        color: #3e0703;
      }

      .exercise-item {
        border: 1px solid #ddd;
        border-radius: 6px;
        padding: 10px;
        margin-bottom: 10px;
        background: #f7f7f7;
        display: grid;
        grid-template-columns: 2fr 1fr 1fr 1fr auto;
        gap: 10px;
        align-items: center;
      }
      .exercise-item input {
        width: 100%;
        color: #222;
      }

      .msg {
        text-align: center;
        margin-top: 8px;
        min-height: 22px;
        font-weight: 500;
      }
      .msg.ok {
        color: #28a745;
      }
      .msg.err {
        color: #dc3545;
      }

      @media (max-width: 768px) {
        th,
        td {
          font-size: 12px;
          padding: 10px;
        }
        .modal-content {
          width: 90%;
        }
        button {
          font-size: 12px;
          padding: 5px 10px;
        }
        .exercise-item {
          grid-template-columns: 1fr;
          gap: 5px;
        }
      }
    </style>
  </head>
  <body>
    <header>
      <a href="/" class="logo">FITFACTORY</a>

      <nav class="navbar">
        <ul>
          <li><a href="/api/user/login">Workouts</a></li>
          <li><a href="/map">Routes</a></li>
          <li><a href="/api/user/community">Community</a></li>
        </ul>
      </nav>

      <!-- Desktop buttons -->
      <div class="btn desktop-btn">
        <button class="a" onclick="location.href='/api/user/logout'">Logout</button>
      </div>

      <!-- Hamburger -->
      <button class="hamburger" aria-label="Toggle menu">
        <span></span>
        <span></span>
        <span></span>
      </button>
    </header>

    <!-- Mobile sliding menu container -->
    <div class="menu" aria-hidden="true">
      <nav>
        <ul>
          <li><a href="/api/user/login">Workouts</a></li>
          <li><a href="/map">Routes</a></li>
          <li><a href="/api/user/community">Community</a></li>
        </ul>
      </nav>

      <div class="btn">
        <button class="a" onclick="location.href='/api/user/logout'">Logout</button>
      </div>

      <!-- Mobile nav placeholder -->
    </div>

    <!-- Overlay -->
    <div class="menu-overlay"></div>

    <div class="container">
      <div class="topbar">
        <% if (typeof user !== 'undefined') { %> Logged in as:
        <b><%= user.name %></b> (<%= user.email %>) <% } %>
      </div>

      <% users.forEach(u => { %>
      <div class="user-section">
        <h3>User: <%= u.name %> (<%= u.email %>)</h3>

        <button class="add-btn" onclick="openWorkoutModal(null,'<%= u._id %>')">
          + Add Workout
        </button>

        <div class="table-responsive">
          <table>
            <thead>
              <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Email</th>
                <th>Role</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              <tr id="row-<%= u._id %>">
                <td><%= u._id %></td>
                <td class="user-name"><%= u.name %></td>
                <td class="user-email"><%= u.email %></td>
                <td class="user-role">
                  <%= typeof u.role === 'number' ? u.role : (u.role ?? '') %>
                </td>
                <td>
                  <button
                    class="update-btn"
                    onclick="openModalFromRow('<%= u._id %>')"
                  >
                    ‚úèÔ∏è Update
                  </button>
                  <button
                    class="delete-btn"
                    onclick="deleteUser('<%= u._id %>')"
                  >
                    üóëÔ∏è Delete
                  </button>
                </td>
              </tr>
            </tbody>
          </table>
        </div>

        <h4>Workouts</h4>
        <div class="table-responsive">
          <table>
            <thead>
              <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Exercise name</th>
                <th>sets</th>
                <th>reps</th>
                <th>weight</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody id="workout-list-<%= u._id %>">
              <% if (u.workouts && u.workouts.length > 0) { %> <%
              u.workouts.forEach(w => { %> <% if (w.exercises &&
              w.exercises.length > 0) { %> <% w.exercises.forEach((ex, idx) => {
              %>
              <tr id="workout-<%= w._id %>">
                <% if (idx === 0) { %>
                <!-- First row: show workout ID + name -->
                <td rowspan="<%= w.exercises.length %>"><%= w._id %></td>
                <td rowspan="<%= w.exercises.length %>" class="workout-name">
                  <%= w.name %>
                </td>
                <% } %>
                <td><%= ex.name %></td>
                <td><%= ex.sets %></td>
                <td><%= ex.reps %></td>
                <td><%= ex.weight %></td>
                <% if (idx === 0) { %>
                <!-- Actions only once per workout -->
                <td rowspan="<%= w.exercises.length %>">
                  <button
                    class="update-btn"
                    onclick="openWorkoutModal('<%= w._id %>', '<%= u._id %>')"
                  >
                    ‚úèÔ∏è Edit
                  </button>
                  <button
                    class="delete-btn"
                    onclick="deleteWorkout('<%= w._id %>')"
                  >
                    üóëÔ∏è Delete
                  </button>
                </td>
                <% } %>
              </tr>
              <% }) %> <% } else { %>
              <tr>
                <td><%= w._id %></td>
                <td class="workout-name"><%= w.name %></td>
                <td
                  colspan="3"
                  style="text-align: center; font-style: italic; color: #888"
                >
                  No exercises
                </td>
                <td>
                  <button
                    class="update-btn"
                    onclick="openWorkoutModal('<%= w._id %>', '<%= u._id %>')"
                  >
                    ‚úèÔ∏è Edit
                  </button>
                  <button
                    class="delete-btn"
                    onclick="deleteWorkout('<%= w._id %>')"
                  >
                    üóëÔ∏è Delete
                  </button>
                </td>
              </tr>
              <% } %> <% }) %> <% } else { %>
              <tr>
                <td
                  colspan="6"
                  style="text-align: center; font-style: italic; color: #888"
                >
                  No workouts found.
                </td>
              </tr>
              <% } %>
            </tbody>
          </table>
        </div>
      </div>
      <% }) %>
    </div>

    <!-- ===== Modals ===== -->
    <div id="updateModal" class="modal">
      <div class="modal-content">
        <span class="close" onclick="closeModal()">&times;</span>
        <h3>Update User</h3>
        <form id="updateForm">
          <input type="hidden" id="userId" name="id" />
          <label>Name:</label
          ><input type="text" id="userName" name="name" required />
          <label>Email:</label
          ><input type="email" id="userEmail" name="email" required />
          <label>Password (leave blank to keep unchanged):</label
          ><input type="password" id="userPassword" name="password" />
          <label>Role:</label>
          <select id="userRole" name="role">
            <option value="0">User (0)</option>
            <option value="1">Admin (1)</option>
          </select>
          <button type="submit" class="update-btn">Save Changes</button>
        </form>
        <div id="modalMsg" class="msg"></div>
      </div>
    </div>

    <div id="workoutModal" class="modal">
      <div class="modal-content">
        <span class="close" onclick="closeWorkoutModal()">&times;</span>
        <h3 id="workoutModalTitle">Add Workout</h3>
        <form id="workoutForm">
          <input type="hidden" id="workoutId" />
          <input type="hidden" id="workoutUserId" />
          <label>Workout Name:</label>
          <input type="text" id="workoutName" required />
          <h4>Exercises</h4>
          <div id="exercisesContainer"></div>
          <button type="button" class="add-btn" onclick="addExercise()">
            + Add Exercise
          </button>
          <button type="submit" class="update-btn">Save Workout</button>
        </form>
        <div id="workoutMsg" class="msg"></div>
      </div>
    </div>

    <script>
      const API_BASE = "/api/admin";
      const modal = document.getElementById("updateModal");
      const workoutModal = document.getElementById("workoutModal");
      const exercisesContainer = document.getElementById("exercisesContainer");
      const workoutForm = document.getElementById("workoutForm");

      // ===== User Functions =====
      function openModalFromRow(id) {
        const row = document.getElementById(`row-${id}`);
        document.getElementById("userId").value = id;
        document.getElementById("userName").value = row
          .querySelector(".user-name")
          .textContent.trim();
        document.getElementById("userEmail").value = row
          .querySelector(".user-email")
          .textContent.trim();
        document.getElementById("userRole").value =
          row.querySelector(".user-role").textContent.trim() === "1"
            ? "1"
            : "0";
        document.getElementById("userPassword").value = "";
        document.getElementById("modalMsg").textContent = "";
        modal.style.display = "flex";
      }

      function closeModal() {
        modal.style.display = "none";
      }

      document
        .getElementById("updateForm")
        .addEventListener("submit", async (e) => {
          e.preventDefault();
          const id = document.getElementById("userId").value;
          const body = {
            name: document.getElementById("userName").value.trim(),
            email: document.getElementById("userEmail").value.trim(),
            password: document.getElementById("userPassword").value,
            role: document.getElementById("userRole").value,
          };
          try {
            const res = await fetch(`${API_BASE}/update/${id}`, {
              method: "PUT",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(body),
            });
            const data = await res.json();
            if (res.ok) {
              alert("User updated");
              location.reload();
            } else alert(data.message || "Error updating user");
          } catch (err) {
            alert(err.message);
          }
        });

      async function deleteUser(id) {
        if (!confirm("Delete this user?")) return;
        const res = await fetch(`${API_BASE}/user/${id}`, { method: "DELETE" });
        if (res.ok) {
          document.getElementById(`row-${id}`).remove();
          alert("User deleted");
        } else alert("Failed");
      }

      // ===== Workout Functions =====
      function addExercise(ex = {}) {
        const div = document.createElement("div");
        div.className = "exercise-item";
        div.innerHTML = `
          <input type="text" class="exercise-name" value="${
            ex.name || ""
          }" placeholder="Exercise Name" required />
          <input type="number" class="exercise-reps" value="${
            ex.reps !== undefined ? ex.reps : ""
          }" placeholder="Reps" required />
          <input type="number" class="exercise-sets" value="${
            ex.sets !== undefined ? ex.sets : ""
          }" placeholder="Sets" required />
          <input type="number" class="exercise-weight" value="${
            ex.weight !== undefined ? ex.weight : ""
          }" placeholder="Weight" required />
          <button type="button" class="delete-btn" onclick="removeExercise(this)">Remove</button>
        `;
        exercisesContainer.appendChild(div);
      }

      function removeExercise(btn) {
        btn.parentElement.remove();
      }

      // ‚úÖ Delete workout from DB
      async function deleteWorkout(id) {
        if (!confirm("Are you sure you want to delete this workout?")) return;

        try {
          const res = await fetch(`/api/admin/workouts/${id}`, {
            method: "DELETE",
          });
          const data = await res.json();

          if (!res.ok) throw new Error(data.message);

          alert(data.message);
          // Refresh workouts list if available
          if (typeof fetchWorkouts === "function") fetchWorkouts();
        } catch (err) {
          alert("Error: " + err.message);
        }
      }

      console.log(
        "Opening workout modal for user:",
        userId,
        "workout:",
        workoutId
      );

      function openWorkoutModal(workoutId, userId) {
        document.getElementById("workoutId").value = workoutId || "";
        document.getElementById("workoutUserId").value = userId;
        document.getElementById("workoutName").value = "";
        exercisesContainer.innerHTML = "";
        document.getElementById("workoutModalTitle").textContent = workoutId
          ? "Edit Workout"
          : "Add Workout";

        if (workoutId) {
          fetch(`/api/user/workouts/${workoutId}`)
            .then((res) => res.json())
            .then((data) => {
              document.getElementById("workoutName").value = data.name || "";
              if (data.exercises && data.exercises.length > 0) {
                data.exercises.forEach((ex) => addExercise(ex));
                console.log("Fetched workout data:", data);
              } else {
                addExercise(); // At least one row
              }
            })
            .catch((err) => {
              console.error(err);
              addExercise();
            });
        } else {
          addExercise(); // Always add one exercise for new workouts
        }

        workoutModal.style.display = "flex";
      }

      function closeWorkoutModal() {
        workoutModal.style.display = "none";
      }

      // ===== Submit Workout Form =====
      workoutForm.addEventListener("submit", async (e) => {
        e.preventDefault();

        const workoutName = document.getElementById("workoutName").value.trim();
        if (!workoutName) {
          alert("Workout name is required");
          return;
        }

        const exerciseItems = Array.from(
          workoutForm.querySelectorAll(".exercise-item")
        );

        if (exerciseItems.length === 0) {
          alert("Please add at least one exercise.");
          return;
        }

        const exercises = [];
        for (const item of exerciseItems) {
          const name = item.querySelector(".exercise-name").value.trim();
          const reps = item.querySelector(".exercise-reps").value;
          const sets = item.querySelector(".exercise-sets").value;
          const weight = item.querySelector(".exercise-weight").value;

          // Convert to numbers safely
          const repsNum = reps === "" ? NaN : Number(reps);
          const setsNum = sets === "" ? NaN : Number(sets);
          const weightNum = weight === "" ? NaN : Number(weight);

          // Skip completely empty row
          if (
            name === "" &&
            isNaN(repsNum) &&
            isNaN(setsNum) &&
            isNaN(weightNum)
          )
            continue;

          // Validate that **all fields are filled**
          if (name === "" || isNaN(repsNum) || isNaN(setsNum)) {
            alert("Exercise name, reps, and sets are required.");
            return;
          }

          exercises.push({
            name,
            reps: repsNum,
            sets: setsNum,
            weight: weightNum,
          });
        }

        if (exercises.length === 0) {
          alert("Please add at least one exercise.");
          return;
        }

        const body = {
          userId: document.getElementById("workoutUserId").value,
          name: workoutName,
          exercises,
        };

        const workoutId = document.getElementById("workoutId").value;
        const url = workoutId
  ? `/api/admin/workouts/${workoutId}`   // PUT
  : `/api/admin/workouts`;              // POST (no /add)

        const method = workoutId ? "PUT" : "POST";

        try {
          const res = await fetch(url, {
            method,
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(body),
          });
          const data = await res.json();
          if (res.ok) {
            alert(data.message || "Workout saved successfully");
            location.reload();
          } else alert(data.message || "Error saving workout");
        } catch (err) {
          alert(err.message);
        }
      });
    </script>

    <script src="/js/acript.js"></script>
    //
  </body>
</html>
